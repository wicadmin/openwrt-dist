name: Openwrt Build Bot
on:
   push:
    branches: master
  #schedule:
  #- cron: 0 0 * * *
  # [workflow_dispatch]

env:
  OWRT_RELEASE: 22.03.2
  OWRT_TARGET: x86
  OWRT_SUBTARGET: 64
  OWRT_SDK_VERSION: 11.2.0
  
jobs:
  buildpkg:
    name: Build Openwrt Package
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 4096
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
    - uses: actions/checkout@master
    - name: Env for Openwrt SDK
      run: sudo apt install -y libev-dev libc-ares-dev libudns-dev libncurses-dev subversion libglib2.0-dev libdbus-1-dev dbus xsltproc
    - name: Download Openwrt SDK
      run: |
        SDK_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-sdk-$OWRT_RELEASE-$OWRT_TARGET-${OWRT_SUBTARGET}_gcc-${OWRT_SDK_VERSION}_musl.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        SDK_HOME=$(head -c -8 <<< $(basename $SDK_URL))
        wget $SDK_URL
        tar xf $(basename $SDK_URL) -C ~/
        mv ~/$SDK_HOME ~/sdk
        cp key-build ~/sdk/
    - name: Prep libmbim
      env:
        PRJ_NAME: libmbim
        VERSION: 1.28.2
      run: |
        cd ~/sdk
        # mkdir -p package/$PRJ_NAME
        svn checkout https://github.com/openwrt/packages/trunk/libs/$PRJ_NAME package/$PRJ_NAME
        sed -i 's/^PKG_SOURCE_VERSION.*/PKG_SOURCE_VERSION:='"$VERSION"'/' package/$PRJ_NAME/Makefile
        cat package/$PRJ_NAME/Makefile
    - name: Prep libqrtr-glib
      env:
        PRJ_NAME: libqrtr-glib
        VERSION: 1.2.2
      run: |
        cd ~/sdk
        # mkdir -p package/$PRJ_NAME
        svn checkout https://github.com/openwrt/packages/trunk/libs/$PRJ_NAME package/$PRJ_NAME
        sed -i 's/^PKG_SOURCE_VERSION.*/PKG_SOURCE_VERSION:='"$VERSION"'/' package/$PRJ_NAME/Makefile
        cat package/$PRJ_NAME/Makefile
    - name: Prep libqmi
      env:
        PRJ_NAME: libqmi
        VERSION: 1.32.2
      run: |
        cd ~/sdk
        # mkdir -p package/$PRJ_NAME
        svn checkout https://github.com/openwrt/packages/trunk/libs/$PRJ_NAME package/$PRJ_NAME
        sed -i 's/^PKG_SOURCE_VERSION.*/PKG_SOURCE_VERSION:='"$VERSION"'/' package/$PRJ_NAME/Makefile
        cat package/$PRJ_NAME/Makefile
    - name: Prep modemmanager
      env:
        PRJ_NAME: modemmanager
        VERSION: 1.20.2
      run: |
        cd ~/sdk
        # mkdir -p package/$PRJ_NAME
        svn checkout https://github.com/openwrt/packages/trunk/net/$PRJ_NAME package/$PRJ_NAME
        sed -i 's/^PKG_SOURCE_VERSION.*/PKG_SOURCE_VERSION:='"$VERSION"'/' package/$PRJ_NAME/Makefile
        cat package/$PRJ_NAME/Makefile
    - name: Download Packages
      run: |
        cd ~/sdk
        # Shadowsocks
        ##git clone -b master https://github.com/shadowsocks/luci-app-shadowsocks package/luci-app-shadowsocks
        ##git clone -b master https://github.com/shadowsocks/openwrt-shadowsocks package/shadowsocks-libev
        ##git clone -b master https://github.com/aa65535/openwrt-simple-obfs package/simple-obfs
        # Misc
        ##git clone -b master https://github.com/aa65535/openwrt-dns-forwarder package/dns-forwarder
        ##git clone -b master https://github.com/aa65535/openwrt-dist-luci package/openwrt-dist-luci
        # Vlmcsd
        ##git clone -b master https://github.com/mchome/openwrt-vlmcsd package/vlmcsd
        ##git clone -b master https://github.com/mchome/luci-app-vlmcsd package/luci-app-vlmcsd
        # Smartdns
        ##git clone -b master https://github.com/pymumu/openwrt-smartdns package/smartdns
        ##git clone -b master https://github.com/pymumu/luci-app-smartdns package/luci-app-smartdns
        ##sed -i 's|../../luci.mk|$(TOPDIR)/feeds/luci/luci.mk|g; 7iPKG_NAME:=luci-app-smartdns' package/luci-app-smartdns/Makefile
        # Dependency
        #git clone -b master https://github.com/shadowsocks/openwrt-feeds package/custom
        ##pushd package/openwrt-dist-luci/tools/po2lmo ; make && sudo make install ; popd
        ./scripts/feeds update -a
        # ./scripts/feeds install golang c-ares libev libopenssl libsodium mbedtls pcre libncursesw6
        ./scripts/feeds install glib2 dbus ppp libxslt
    - name: Compile
      run: |
        cd ~/sdk
        echo "Number of processors:" 
        echo $(nproc)

        make defconfig
        # Edit config
        echo ".config in buildpkg AFTER make defconfig"
        cat .config
        # make V=s
        # make clean download world
        make -j$(nproc) V=s
    - name: Upload
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        SDK_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-sdk-$OWRT_RELEASE-$OWRT_TARGET-${OWRT_SUBTARGET}_gcc-${OWRT_SDK_VERSION}_musl.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        TAG=$(sed -n 's/.*targets\/\(\w*\)\/\(\w*\)\/.*/packages\/\1\/\2/p' <<< $SDK_URL)
        # Upload base only
        cd ~/sdk/bin/packages/*/base
        git init
        git config user.name "bot"
        git config user.email "bot@github.com"
        git add .
        git commit -m "$TAG$(TZ='America/New_York' date +@%Y%m%d)"
        git push --force --quiet "https://wicadmin:$GITHUB_TOKEN@github.com/wicadmin/openwrt-dist.git" HEAD:$TAG
  buildimg:
    name: Build Openwrt Image
    needs: buildpkg
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - PROFILE: generic.x86_64
          INCLUDE_FILES: false
    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 4096
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
    - uses: actions/checkout@master
    - name: Env for Openwrt ImageBuilder
      run: sudo apt install -y libncurses-dev
    - name: Download Openwrt ImageBuilder
      run: |
        IB_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-imagebuilder-$OWRT_RELEASE-$OWRT_TARGET-$OWRT_SUBTARGET.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        wget $IB_URL
        tar xf $(basename $IB_URL)
    - name: Fetch Files
      if: matrix.INCLUDE_FILES
      run: |
        IB_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-imagebuilder-$OWRT_RELEASE-$OWRT_TARGET-$OWRT_SUBTARGET.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        IB_HOME=$(basename $IB_URL|head -c -8)
        TAG=$(sed -n 's/.*targets\/\(\w*\)\/\(\w*\)\/.*/packages\/\1\/\2/p' <<< $IB_URL)
        cd $IB_HOME
        mkdir -p files/root/
        mkdir -p files/etc/opkg/
        mkdir -p files/etc/smartdns/
        cp ../simonsmh-dist.pub files/root/
        wget https://github.com/SYHGroup/easy_shell/raw/master/ddns/CloudFlare-ddns.sh -O files/root/CloudFlare-ddns.sh
        wget https://github.com/SYHGroup/easy_shell/raw/master/sss/update_list -O files/root/update_list
        cat files/root/update_list | sed "s/\/etc/files\/etc/g" | bash
        wget https://gist.githubusercontent.com/simonsmh/2a609e0c801acabc2e1d7733432bce4c/raw/blacklist-ip.conf -O files/etc/smartdns/blacklist-ip.conf
        echo "src/gz wicadmin https://cdn.jsdelivr.net/gh/wicadmin/openwrt-dist@$TAG" > files/etc/opkg/customfeeds.conf
    - name: Build Image
      shell: bash
      env:
        PROFILE: ${{ matrix.PROFILE }}
      run: |
        IB_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-imagebuilder-$OWRT_RELEASE-$OWRT_TARGET-$OWRT_SUBTARGET.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        DEFAULT_PACKAGES=$(wget -qO - https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-$OWRT_RELEASE-$OWRT_TARGET-$OWRT_SUBTARGET.manifest | sed  's/ - .*/ /' | \
                        sed 's/dnsmasq//g; s/kmod-e1000\ //g; s/kmod-ppp\ //g; s/kmod-pppoe\ //g; s/kmod-ppox\ //g; s/luci-proto-ppp//g; s/ppp\ //g; s/ppp-mod-pppoe//g; s/kmod-e1000e//g; s/libwolfssl5.5.1.ee39414e//g' | tr '\n' ' ')
        #                sed 's/dnsmasq//g; s/kmod-e1000\ //g; s/kmod-ppp\ //g; s/kmod-pppoe\ //g; s/kmod-ppox\ //g; s/luci-proto-ppp//g; s/ppp\ //g; s/ppp-mod-pppoe//g; s/kmod-e1000e//g; s/libustream-wolfssl20201210//g; s/libwolfssl5.5.1.ee39414e//g' | tr '\n' ' ')
        PACKAGES="$DEFAULT_PACKAGES \
          -luci-ssl -dnsmasq dnsmasq-full lm-sensors-detect bash curl diffutils jq luci-app-openvpn \
          luci-proto-qmi fdisk mosquitto-client-nossl mosquitto-nossl unzip usb-modeswitch \
          adblock e2fsprogs jsonfilter luci-app-adblock partx-utils r8169-firmware iperf3 mbim-utils qmi-utils \
          libmbim libqmi modemmanager luci-proto-modemmanager ppp nano luci-app-commands ca-bundle ca-certificates pciutils usbutils rsync ipset mtr lscpu \
          luci-proto-wireguard luci-app-wireguard wireguard-tools \
          kmod-usb-hid kmod-usb3 kmod-usb2 -dnscrypt-proxy -kmod-e1000 kmod-r8169 \
          kmod-hwmon-core kmod-lib-crc-itu-t kmod-libphy kmod-natsemi kmod-ne2k-pci usbutils pciutils \
          kmod-usb-net-sierrawireless kmod-usb-serial-sierrawireless kmod-usb-serial-qualcomm \
          kmod-usb-net-cdc-ether kmod-usb-net-cdc-mbim kmod-usb-net-cdc-ncm kmod-usb-net-hso msmtp sysfsutils \
          kmod-usb-net-qmi-wwan kmod-usb-serial kmod-usb-serial-option kmod-usb-serial-wwan jq jsonfilter speedtest-netperf \
          -ddns-scripts -ddns-scripts_no-ip_com -ext-samba -ext-sms -kmod-e1000 -kmod-i2c-algo-bit memcached foolsm \
          -kmod-i2c-core -kmod-ppp -kmod-pppoe -kmod-pppox -ppp-mod-pppoe -kmod-e1000e -kmod-usb-net-huawei-cdc-ncm \
          -libsodium -libustream-mbedtls -libustream-wolfssl -luci-app-hotspot \
          -luci-app-samba -luci-proto-ppp -luci-theme-bootstrap -luci-theme-darkmatter -mwan3 -ntfs-3g -px5g-mbedtls \
          -p910nd -luci-app-p910nd -ext-p910nd -samba36-server -wireless-tools -wpad-mini -wwan rclone \
          -openvpn-openssl -luci-ssl-openssl libwolfssl5.5.3.ee39414e"
        IB_HOME=$(basename $IB_URL|head -c -8)
        TAG=$(sed -n 's/.*targets\/\(\w*\)\/\(\w*\)\/.*/packages\/\1\/\2/p' <<< $IB_URL)
        cd $IB_HOME
        sed -i "/check_signature/d" repositories.conf
        echo "src/gz wicadmin https://github.com/wicadmin/openwrt-dist/raw/$TAG" >> repositories.conf
        makeopts=("PROFILE=${PROFILE%.*}" "PACKAGES=$PACKAGES")
        [[ -d files ]] && makeopts+=("FILES=files/")
        make info
        echo "Checking disk space"
        df -h
        sed -i 's/^\s*\(CONFIG_TARGET_ROOTFS_PARTSIZE\)\s*=\s*[^#\n \t]*/\1=512/' .config
        sed -i 's/^\s*\(CONFIG_TARGET_KERNEL_PARTSIZE\)\s*=\s*[^#\n \t]*/\1=16/' .config
        echo ".config in buildimg and SED changes"
        cat .config
        TERM=xterm-256color make image "${makeopts[@]}"
    - name: Upload
      id: upload
      env:
        PROFILE: ${{ matrix.PROFILE }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        IB_URL=https://downloads.openwrt.org/releases/$OWRT_RELEASE/targets/$OWRT_TARGET/$OWRT_SUBTARGET/openwrt-imagebuilder-$OWRT_RELEASE-$OWRT_TARGET-$OWRT_SUBTARGET.Linux-${OWRT_TARGET}_${OWRT_SUBTARGET}.tar.xz
        IB_HOME=$(basename $IB_URL|head -c -8)
        TAG=$(sed -n 's/.*targets\/\(\w*\)\/\(\w*\)\/.*/packages\/\1\/\2/p' <<< $IB_URL)
        # Prepare Release
        ARTIFACTPATH="$(pwd)/image"
        mkdir -p $ARTIFACTPATH
        # Upload image
        cd $IB_HOME/bin/targets/$(cut -b 10- <<< $TAG)
        cp * $ARTIFACTPATH
        git init
        git config user.name "bot"
        git config user.email "bot@github.com"
        git add .
        git commit -m "$PROFILE$(TZ='America/New_York' date +@%Y%m%d)"
        git push --force --quiet "https://wicadmin:$GITHUB_TOKEN@github.com/wicadmin/openwrt-dist.git" HEAD:image/$PROFILE
    - uses: actions/upload-artifact@v2
      with:
        name: image_${{ matrix.PROFILE }}
        path: ./image
